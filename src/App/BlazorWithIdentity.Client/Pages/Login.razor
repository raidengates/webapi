@page "/login"
@layout LoginLayout
@inject IUriHelper uriHelper
@inject IdentityAuthenticationState state

<form class="u-center  shadow-sm p-3 mb-5 bg-white rounded form-signin" @onsubmit="@OnSubmit">
    
    <h4 class="font-weight-normal text-center">Login</h4>
    <div class="form-group ">
<label for="inputUsername" class="sr-only">User Name</label>
    <input id="inputUsername" class="form-control" placeholder="Username" required autofocus @bind="@loginParameters.UserName" />
    </div>
    
<div class="form-group ">
 <label for="inputPassword" class="sr-only">Password</label>
    <input type="password" id="inputPassword" class="form-control" placeholder="Password" required @bind="@loginParameters.Password" />
</div>
   

    <div class="form-check m-3">
        <input type="checkbox" id="inputRememberMe" class="form-check-input" @bind="@loginParameters.RememberMe" />
        <label class="form-check-label" for="inputRememberMe">Remember Me</label>
    </div>

    <button class="btn btn-primary btn-block" type="submit">Sign in</button>

    <label class="text-danger">@error</label>

    <NavLink href="register">
        <h6 class="font-weight-normal text-center">Create account</h6>
    </NavLink>
</form>

@functions{

    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string error { get; set; }

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if ((await AuthenticationState).User.Identity.IsAuthenticated)
        {
           uriHelper.NavigateTo("/");
        }
    }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await state.Login(loginParameters);
            uriHelper.NavigateTo("/");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}